2021-09-22 15:51:12.382: INFO: Common.Auth: Found User(displayName: null, email: belakovics.akos@gmail.com, emailVerified: false, isAnonymous: false, metadata: UserMetadata(creationTime: 2021-04-23 16:36:51.000, lastSignInTime: 2021-09-21 07:55:58.000), phoneNumber: null, photoURL: null, providerData, [UserInfo(displayName: null, email: belakovics.akos@gmail.com, phoneNumber: null, photoURL: null, providerId: password, uid: belakovics.akos@gmail.com)], refreshToken: ACzBnCipeZS3KOt9XY9w04fL6H9mbq6jzmVkp3Ig-wvnVlLu0LNAjn19NKFsn-97NSn1tBnyS-SG3dT149opDG0ykjflgxSNDNXjr0FCuITQv7Nc_6lUtXx_b3Aeihkp77sfGh8c2bNlI_-hyN0FBGVjh78ZTxD67ASjUAQOG4PRn4fJoBOmfo07YqHcws6t3-YVvCdXAfs5QeZZ9ksJSDPH2p0dCPVf7w, tenantId: null, uid: Gs1AEmym08e1dUdmWmvw5f6Gezs2)
2021-09-22 15:51:12.426: INFO: Common.Auth: Arrived user from Firebase User(displayName: null, email: belakovics.akos@gmail.com, emailVerified: false, isAnonymous: false, metadata: UserMetadata(creationTime: 2021-04-23 16:36:51.000, lastSignInTime: 2021-09-21 07:55:58.000), phoneNumber: null, photoURL: null, providerData, [UserInfo(displayName: null, email: belakovics.akos@gmail.com, phoneNumber: null, photoURL: null, providerId: password, uid: belakovics.akos@gmail.com)], refreshToken: ACzBnCipeZS3KOt9XY9w04fL6H9mbq6jzmVkp3Ig-wvnVlLu0LNAjn19NKFsn-97NSn1tBnyS-SG3dT149opDG0ykjflgxSNDNXjr0FCuITQv7Nc_6lUtXx_b3Aeihkp77sfGh8c2bNlI_-hyN0FBGVjh78ZTxD67ASjUAQOG4PRn4fJoBOmfo07YqHcws6t3-YVvCdXAfs5QeZZ9ksJSDPH2p0dCPVf7w, tenantId: null, uid: Gs1AEmym08e1dUdmWmvw5f6Gezs2)
2021-09-22 15:51:13.601: INFO: gql.AppGqlClient: Enqueue 0 mutations from persistence
2021-09-22 15:51:13.601: INFO: gql.AppGqlClient: Enqueue done
2021-09-22 15:51:13.606: FINE: gql.links.LogRequestsLink: Request sent: GGetCurrentUserProfileReq {
2021-09-22 15:51:13.606: FINE: gql.links.LogRequestsLink:   vars=GGetCurrentUserProfileVars {
2021-09-22 15:51:13.606: FINE: gql.links.LogRequestsLink:     id=Gs1AEmym08e1dUdmWmvw5f6Gezs2,
2021-09-22 15:51:13.606: FINE: gql.links.LogRequestsLink:   },
2021-09-22 15:51:13.606: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription GetCurrentUserProfile($id: String!) {\n  profile_by_pk(id: $id) {\n    __typename\n    ...ProfileExt\n    organisations_created_by_me {\n      __typename\n      ...Organisation\n    }\n  }\n}\n\nfragment Profile on profile {\n  __typename\n  id\n  name\n  birth_year\n  gender\n}\n\nfragment ProfileExt on profile {\n  __typename\n  ...Profile\n  email\n  phone\n  vat_id\n  city\n  address\n  company_name\n  postal_code\n}\n\nfragment Organisation on organisation {\n  __typename\n  id\n  name\n  url\n}\n\nfragment OrganisationExt on organisation {\n  __typename\n  ...Organisation\n  email\n  payment_url\n  created_at\n}"), operationName: GetCurrentUserProfile),
2021-09-22 15:51:13.606: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-22 15:51:13.606: FINE: gql.links.LogRequestsLink: }
2021-09-22 15:51:13.651: FINE: gql.links.RetryUntilResponseLink: (GetCurrentUserProfile#709555560): Requesting from source
2021-09-22 15:51:13.660: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for GetCurrentUserProfile
2021-09-22 15:51:13.759: INFO: gql.AppGqlClient: Enqueue 0 mutations from persistence
2021-09-22 15:51:13.760: INFO: gql.AppGqlClient: Enqueue done
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink: Request sent: GGetActivitiesReq {
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink:   vars=GGetActivitiesVars {
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink:     trunc=HOUR,
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink:     tzoffset=2,
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink:   },
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("fragment Trail on trail {\n  __typename\n  id\n  name\n  ...TrailCardFields\n}\n\nquery GetManagedOrgs {\n  __typename\n  organisation(order_by: {name: asc}) {\n    __typename\n    ...Organisation\n  }\n}\n\nsubscription GetTrails($orderBy: order_by!) {\n  trail(order_by: {name: $orderBy}, where: {deleted_at: {_is_null: true}}) {\n    __typename\n    ...Trail\n  }\n}\n\nmutation CreateTrail($trail: trail_insert_input!) {\n  __typename\n  insert_trail_one(object: $trail) {\n    __typename\n    ...Trail\n  }\n}\n\nmutation SoftDeleteTrail($id: uuid!, $time: timestamptz) {\n  __typename\n  update_trail_by_pk(pk_columns: {id: $id}, _set: {deleted_at: $time}) {\n    __typename\n  }\n}\n\nsubscription GetActivities($trunc: String, $tzoffset: Int) {\n  ob_get_activities(args: {trunc: $trunc, tzoffset: $tzoffset}) {\n    __typename\n    time\n    created\n    started\n    ended\n    gaveup\n  }\n}\n\nsubscription GetToplist($trailId: uuid) {\n  activity(where: {_and: {trail_config: {trail_id: {_eq: $trailId}}}, start_at: {_is_null: false}, end_at: {_is_null: false}}) {\n    __typename\n    ...ActivityTimes\n    created_by {\n      __typename\n      name\n      birth_year\n      address\n    }\n    trail_config {\n      __typename\n      activity_type {\n        __typename\n        ...ActivityType\n      }\n      reward_type {\n        __typename\n        ...RewardType\n      }\n    }\n  }\n}\n\nsubscription GetHistory($trailId: uuid) {\n  activity(where: {_and: {start_at: {_is_null: false}, end_at: {_is_null: false}}}) {\n    __typename\n    ...ActivityTimes\n    created_by {\n      __typename\n      name\n      birth_year\n      address\n      email\n      phone\n    }\n    trail_config {\n      __typename\n      activity_type {\n        __typename\n        ...ActivityType\n      }\n      reward_type {\n        __typename\n        ...RewardType\n      }\n      trail {\n        __typename\n        name\n      }\n      trail_id\n    }\n  }\n}\n\nsubscription GetReachedCheckpoints($activityId: uuid!) {\n  activity_by_pk(id: $activityId) {\n    __typename\n    id\n    activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n      __typename\n      reached_at\n      checkpoint {\n        __typename\n        ...Checkpoint\n      }\n    }\n    trail_config {\n      __typename\n      trail {\n        __typename\n        checkpoints(order_by: {index: asc}) {\n          __typename\n          ...Checkpoint\n        }\n      }\n    }\n  }\n}\n\nfragment ActivityType on activity_type {\n  __typename\n  id\n  name_en\n  name_hu\n  material_icon_name\n  weight\n}\n\nfragment RewardType on reward_type {\n  __typename\n  id\n  name_en\n  name_hu\n  auto_approve\n  material_icon_name\n  weight\n}\n\nfragment ActivityTimes on activity {\n  __typename\n  id\n  start_at\n  end_at\n  planned_at\n}\n\nfragment Organisation on organisation {\n  __typename\n  id\n  name\n  url\n}\n\nfragment OrganisationExt on organisation {\n  __typename\n  ...Organisation\n  email\n  payment_url\n  created_at\n}\n\nfragment Checkpoint on checkpoint {\n  __typename\n  id\n  name\n  index\n  location\n}\n\nfragment CheckpointExt on checkpoint {\n  __typename\n  ...Checkpoint\n  description\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: GetActivities),
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-22 15:51:13.775: FINE: gql.links.LogRequestsLink: }
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink: Request sent: GGetActivitiesReq {
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink:   vars=GGetActivitiesVars {
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink:     trunc=DAY,
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink:     tzoffset=2,
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink:   },
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("fragment Trail on trail {\n  __typename\n  id\n  name\n  ...TrailCardFields\n}\n\nquery GetManagedOrgs {\n  __typename\n  organisation(order_by: {name: asc}) {\n    __typename\n    ...Organisation\n  }\n}\n\nsubscription GetTrails($orderBy: order_by!) {\n  trail(order_by: {name: $orderBy}, where: {deleted_at: {_is_null: true}}) {\n    __typename\n    ...Trail\n  }\n}\n\nmutation CreateTrail($trail: trail_insert_input!) {\n  __typename\n  insert_trail_one(object: $trail) {\n    __typename\n    ...Trail\n  }\n}\n\nmutation SoftDeleteTrail($id: uuid!, $time: timestamptz) {\n  __typename\n  update_trail_by_pk(pk_columns: {id: $id}, _set: {deleted_at: $time}) {\n    __typename\n  }\n}\n\nsubscription GetActivities($trunc: String, $tzoffset: Int) {\n  ob_get_activities(args: {trunc: $trunc, tzoffset: $tzoffset}) {\n    __typename\n    time\n    created\n    started\n    ended\n    gaveup\n  }\n}\n\nsubscription GetToplist($trailId: uuid) {\n  activity(where: {_and: {trail_config: {trail_id: {_eq: $trailId}}}, start_at: {_is_null: false}, end_at: {_is_null: false}}) {\n    __typename\n    ...ActivityTimes\n    created_by {\n      __typename\n      name\n      birth_year\n      address\n    }\n    trail_config {\n      __typename\n      activity_type {\n        __typename\n        ...ActivityType\n      }\n      reward_type {\n        __typename\n        ...RewardType\n      }\n    }\n  }\n}\n\nsubscription GetHistory($trailId: uuid) {\n  activity(where: {_and: {start_at: {_is_null: false}, end_at: {_is_null: false}}}) {\n    __typename\n    ...ActivityTimes\n    created_by {\n      __typename\n      name\n      birth_year\n      address\n      email\n      phone\n    }\n    trail_config {\n      __typename\n      activity_type {\n        __typename\n        ...ActivityType\n      }\n      reward_type {\n        __typename\n        ...RewardType\n      }\n      trail {\n        __typename\n        name\n      }\n      trail_id\n    }\n  }\n}\n\nsubscription GetReachedCheckpoints($activityId: uuid!) {\n  activity_by_pk(id: $activityId) {\n    __typename\n    id\n    activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n      __typename\n      reached_at\n      checkpoint {\n        __typename\n        ...Checkpoint\n      }\n    }\n    trail_config {\n      __typename\n      trail {\n        __typename\n        checkpoints(order_by: {index: asc}) {\n          __typename\n          ...Checkpoint\n        }\n      }\n    }\n  }\n}\n\nfragment ActivityType on activity_type {\n  __typename\n  id\n  name_en\n  name_hu\n  material_icon_name\n  weight\n}\n\nfragment RewardType on reward_type {\n  __typename\n  id\n  name_en\n  name_hu\n  auto_approve\n  material_icon_name\n  weight\n}\n\nfragment ActivityTimes on activity {\n  __typename\n  id\n  start_at\n  end_at\n  planned_at\n}\n\nfragment Organisation on organisation {\n  __typename\n  id\n  name\n  url\n}\n\nfragment OrganisationExt on organisation {\n  __typename\n  ...Organisation\n  email\n  payment_url\n  created_at\n}\n\nfragment Checkpoint on checkpoint {\n  __typename\n  id\n  name\n  index\n  location\n}\n\nfragment CheckpointExt on checkpoint {\n  __typename\n  ...Checkpoint\n  description\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: GetActivities),
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-22 15:51:13.859: FINE: gql.links.LogRequestsLink: }
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink: Request sent: GGetActivitiesReq {
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink:   vars=GGetActivitiesVars {
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink:     trunc=MONTH,
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink:     tzoffset=2,
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink:   },
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("fragment Trail on trail {\n  __typename\n  id\n  name\n  ...TrailCardFields\n}\n\nquery GetManagedOrgs {\n  __typename\n  organisation(order_by: {name: asc}) {\n    __typename\n    ...Organisation\n  }\n}\n\nsubscription GetTrails($orderBy: order_by!) {\n  trail(order_by: {name: $orderBy}, where: {deleted_at: {_is_null: true}}) {\n    __typename\n    ...Trail\n  }\n}\n\nmutation CreateTrail($trail: trail_insert_input!) {\n  __typename\n  insert_trail_one(object: $trail) {\n    __typename\n    ...Trail\n  }\n}\n\nmutation SoftDeleteTrail($id: uuid!, $time: timestamptz) {\n  __typename\n  update_trail_by_pk(pk_columns: {id: $id}, _set: {deleted_at: $time}) {\n    __typename\n  }\n}\n\nsubscription GetActivities($trunc: String, $tzoffset: Int) {\n  ob_get_activities(args: {trunc: $trunc, tzoffset: $tzoffset}) {\n    __typename\n    time\n    created\n    started\n    ended\n    gaveup\n  }\n}\n\nsubscription GetToplist($trailId: uuid) {\n  activity(where: {_and: {trail_config: {trail_id: {_eq: $trailId}}}, start_at: {_is_null: false}, end_at: {_is_null: false}}) {\n    __typename\n    ...ActivityTimes\n    created_by {\n      __typename\n      name\n      birth_year\n      address\n    }\n    trail_config {\n      __typename\n      activity_type {\n        __typename\n        ...ActivityType\n      }\n      reward_type {\n        __typename\n        ...RewardType\n      }\n    }\n  }\n}\n\nsubscription GetHistory($trailId: uuid) {\n  activity(where: {_and: {start_at: {_is_null: false}, end_at: {_is_null: false}}}) {\n    __typename\n    ...ActivityTimes\n    created_by {\n      __typename\n      name\n      birth_year\n      address\n      email\n      phone\n    }\n    trail_config {\n      __typename\n      activity_type {\n        __typename\n        ...ActivityType\n      }\n      reward_type {\n        __typename\n        ...RewardType\n      }\n      trail {\n        __typename\n        name\n      }\n      trail_id\n    }\n  }\n}\n\nsubscription GetReachedCheckpoints($activityId: uuid!) {\n  activity_by_pk(id: $activityId) {\n    __typename\n    id\n    activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n      __typename\n      reached_at\n      checkpoint {\n        __typename\n        ...Checkpoint\n      }\n    }\n    trail_config {\n      __typename\n      trail {\n        __typename\n        checkpoints(order_by: {index: asc}) {\n          __typename\n          ...Checkpoint\n        }\n      }\n    }\n  }\n}\n\nfragment ActivityType on activity_type {\n  __typename\n  id\n  name_en\n  name_hu\n  material_icon_name\n  weight\n}\n\nfragment RewardType on reward_type {\n  __typename\n  id\n  name_en\n  name_hu\n  auto_approve\n  material_icon_name\n  weight\n}\n\nfragment ActivityTimes on activity {\n  __typename\n  id\n  start_at\n  end_at\n  planned_at\n}\n\nfragment Organisation on organisation {\n  __typename\n  id\n  name\n  url\n}\n\nfragment OrganisationExt on organisation {\n  __typename\n  ...Organisation\n  email\n  payment_url\n  created_at\n}\n\nfragment Checkpoint on checkpoint {\n  __typename\n  id\n  name\n  index\n  location\n}\n\nfragment CheckpointExt on checkpoint {\n  __typename\n  ...Checkpoint\n  description\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: GetActivities),
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-22 15:51:13.941: FINE: gql.links.LogRequestsLink: }
2021-09-22 15:51:14.044: FINE: gql.links.RetryUntilResponseLink: (GetActivities#137847391): Requesting from source
2021-09-22 15:51:14.062: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for GetActivities
2021-09-22 15:51:14.359: FINE: gql.links.RetryUntilResponseLink: (GetActivities#945598125): Requesting from source
2021-09-22 15:51:14.379: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for GetActivities
2021-09-22 15:51:14.649: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for GetActivities
2021-09-22 15:51:14.695: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for GetActivities
2021-09-22 15:51:14.845: FINE: gql.links.RetryUntilResponseLink: (GetActivities#1174814261): Requesting from source
2021-09-22 15:51:14.856: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for GetActivities
2021-09-22 15:51:15.083: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for GetCurrentUserProfile
2021-09-22 15:51:15.731: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for GetActivities
