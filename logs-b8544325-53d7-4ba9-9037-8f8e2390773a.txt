2021-09-23 06:36:24.539622: FINE: services.LocationService: Initializing...
2021-09-23 06:36:24.539764: FINE: services.LocationService: Register port mapping
2021-09-23 06:36:24.565953: INFO: Common.Auth: Found User(displayName: null, email: albert@papps.net, emailVerified: false, isAnonymous: false, metadata: UserMetadata(creationTime: 2021-09-08 13:13:28.416, lastSignInTime: 2021-09-08 13:13:28.416), phoneNumber: null, photoURL: null, providerData, [UserInfo(displayName: null, email: albert@papps.net, phoneNumber: null, photoURL: null, providerId: password, uid: albert@papps.net)], refreshToken: , tenantId: null, uid: 9ViQ8qkLSNeTSfk6WN5S4SYoFMv1)
2021-09-23 06:36:24.567305: INFO: Common.Auth: Arrived user from Firebase User(displayName: null, email: albert@papps.net, emailVerified: false, isAnonymous: false, metadata: UserMetadata(creationTime: 2021-09-08 13:13:28.416, lastSignInTime: 2021-09-08 13:13:28.416), phoneNumber: null, photoURL: null, providerData, [UserInfo(displayName: null, email: albert@papps.net, phoneNumber: null, photoURL: null, providerId: password, uid: albert@papps.net)], refreshToken: , tenantId: null, uid: 9ViQ8qkLSNeTSfk6WN5S4SYoFMv1)
2021-09-23 06:36:24.568274: INFO: services.LocationService: Initialized
2021-09-23 06:36:24.648341: INFO: gql.AppGqlClient: Enqueue 0 mutations from persistence
2021-09-23 06:36:24.648444: INFO: gql.AppGqlClient: Enqueue done
2021-09-23 06:36:24.649168: FINE: gql.links.LogRequestsLink: Request sent: GGetCurrentUserProfileReq {
2021-09-23 06:36:24.649168: FINE: gql.links.LogRequestsLink:   vars=GGetCurrentUserProfileVars {
2021-09-23 06:36:24.649168: FINE: gql.links.LogRequestsLink:     id=9ViQ8qkLSNeTSfk6WN5S4SYoFMv1,
2021-09-23 06:36:24.649168: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:36:24.649168: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription GetCurrentUserProfile($id: String!) {\n  profile_by_pk(id: $id) {\n    __typename\n    ...ProfileExt\n    organisations_created_by_me {\n      __typename\n      ...Organisation\n    }\n  }\n}\n\nfragment Profile on profile {\n  __typename\n  id\n  name\n  birth_year\n  gender\n}\n\nfragment ProfileExt on profile {\n  __typename\n  ...Profile\n  email\n  phone\n  vat_id\n  city\n  address\n  company_name\n  postal_code\n}\n\nfragment Organisation on organisation {\n  __typename\n  id\n  name\n  url\n}\n\nfragment OrganisationExt on organisation {\n  __typename\n  ...Organisation\n  email\n  payment_url\n  created_at\n}"), operationName: GetCurrentUserProfile),
2021-09-23 06:36:24.649168: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:36:24.649168: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:36:24.655767: FINE: gql.links.LogRequestsLink: Request sent: GAthleteGetTrailsForListingReq {
2021-09-23 06:36:24.655767: FINE: gql.links.LogRequestsLink:   vars=GAthleteGetTrailsForListingVars {
2021-09-23 06:36:24.655767: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:36:24.655767: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription AthleteGetTrailsForListing {\n  trail(order_by: {popularity: desc}) {\n    __typename\n    id\n    ...TrailCardFields\n  }\n}\n\nsubscription GetCompletedTrails {\n  activity(where: {_and: [{start_at: {_is_null: false}}, {_or: [{end_at: {_is_null: false}}, {giveup_at: {_is_null: false}}]}]}) {\n    __typename\n    giveup_at\n    ...ActivityTimes\n    trail_config {\n      __typename\n      trail {\n        __typename\n        ...TrailCardFields\n        id\n      }\n    }\n  }\n}\n\nsubscription GetCompletedTrail($activityId: uuid!) {\n  activity_by_pk(id: $activityId) {\n    __typename\n    ...ActivityTimes\n    trail_config {\n      __typename\n      trail {\n        __typename\n        ...TrailCardFields\n      }\n    }\n  }\n}\n\nfragment IntroStepsFields on trail {\n  __typename\n  id\n  trail_configs {\n    __typename\n    ...TrailConfig\n  }\n  organisation {\n    __typename\n    url\n    payment_url\n  }\n}\n\nfragment TrailConfig on trail_config {\n  __typename\n  id\n  trail_id\n  activity_type {\n    __typename\n    ...ActivityType\n  }\n  reward_type {\n    __typename\n    ...RewardType\n  }\n}\n\nfragment ActivityType on activity_type {\n  __typename\n  id\n  name_en\n  name_hu\n  material_icon_name\n  weight\n}\n\nfragment RewardType on reward_type {\n  __typename\n  id\n  name_en\n  name_hu\n  auto_approve\n  material_icon_name\n  weight\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}\n\nfragment ActivityCardFields on activity {\n  __typename\n  id\n  planned_at\n  trail_config {\n    __typename\n    trail {\n      __typename\n      ...TrailCardFields\n    }\n  }\n}\n\nfragment ActivityTimes on activity {\n  __typename\n  id\n  start_at\n  end_at\n  planned_at\n}"), operationName: AthleteGetTrailsForListing),
2021-09-23 06:36:24.655767: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:36:24.655767: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:36:24.657277: FINE: gql.links.RetryUntilResponseLink: (GetCurrentUserProfile#1910879012): Requesting from source
2021-09-23 06:36:24.657871: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for GetCurrentUserProfile
2021-09-23 06:36:24.658401: FINE: gql.links.RetryUntilResponseLink: (AthleteGetTrailsForListing#337648663): Requesting from source
2021-09-23 06:36:24.661314: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for AthleteGetTrailsForListing
2021-09-23 06:36:25.155680: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteGetTrailsForListing
2021-09-23 06:36:25.881729: FINE: gql.links.LogRequestsLink: Request sent: GAthleteGetEntriesReq {
2021-09-23 06:36:25.881729: FINE: gql.links.LogRequestsLink:   vars=GAthleteGetEntriesVars {
2021-09-23 06:36:25.881729: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:36:25.881729: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription AthleteGetEntries {\n  activity(order_by: {planned_at: asc, trail_config: {trail: {name: asc}}}, where: {_and: {end_at: {_is_null: true}, giveup_at: {_is_null: true}, deleted_at: {_is_null: true}}}) {\n    __typename\n    ...ActivityCardFields\n    ...OFFLTrackedActivity\n  }\n}\n\nfragment OFFLTrackedActivity on activity {\n  __typename\n  ...ActivityStateFields\n  id\n  path\n  trail_config {\n    __typename\n    id\n    trail {\n      __typename\n      id\n      circular_checkpoints\n      trail_path\n      summary_path\n      checkpoints(order_by: {index: asc}) {\n        __typename\n        id\n        index\n        location\n        range_meters\n      }\n    }\n  }\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment OFFLTrackedActivityWrite on activity {\n  __typename\n  id\n  end_at\n  path\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment ActivityStateFields on activity {\n  __typename\n  deleted_at\n  planned_at\n  approved_at\n  start_at\n  end_at\n  giveup_at\n  trail_config {\n    __typename\n    reward_type {\n      __typename\n      auto_approve\n    }\n  }\n}\n\nfragment ActivityCardFields on activity {\n  __typename\n  id\n  planned_at\n  trail_config {\n    __typename\n    trail {\n      __typename\n      ...TrailCardFields\n    }\n  }\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: AthleteGetEntries),
2021-09-23 06:36:25.881729: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:36:25.881729: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:36:25.885110: FINE: gql.links.RetryUntilResponseLink: (AthleteGetEntries#1340711445): Requesting from source
2021-09-23 06:36:25.950540: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for GetCurrentUserProfile
2021-09-23 06:36:25.965452: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteGetEntries
2021-09-23 06:36:26.561058: FINE: gql.links.LogRequestsLink: Request sent: GAthleteWatchActivityDetailsReq {
2021-09-23 06:36:26.561058: FINE: gql.links.LogRequestsLink:   vars=GAthleteWatchActivityDetailsVars {
2021-09-23 06:36:26.561058: FINE: gql.links.LogRequestsLink:     activityId=2281d167-9469-4000-8e09-385044ebc326,
2021-09-23 06:36:26.561058: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:36:26.561058: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription AthleteWatchActivityDetails($activityId: uuid!) {\n  activity_by_pk(id: $activityId) {\n    __typename\n    ...ActivityCardFields\n    ...OFFLTrackedActivity\n  }\n}\n\nfragment OFFLTrackedActivity on activity {\n  __typename\n  ...ActivityStateFields\n  id\n  path\n  trail_config {\n    __typename\n    id\n    trail {\n      __typename\n      id\n      circular_checkpoints\n      trail_path\n      summary_path\n      checkpoints(order_by: {index: asc}) {\n        __typename\n        id\n        index\n        location\n        range_meters\n      }\n    }\n  }\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment OFFLTrackedActivityWrite on activity {\n  __typename\n  id\n  end_at\n  path\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment ActivityStateFields on activity {\n  __typename\n  deleted_at\n  planned_at\n  approved_at\n  start_at\n  end_at\n  giveup_at\n  trail_config {\n    __typename\n    reward_type {\n      __typename\n      auto_approve\n    }\n  }\n}\n\nfragment ActivityType on activity_type {\n  __typename\n  id\n  name_en\n  name_hu\n  material_icon_name\n  weight\n}\n\nfragment ActivityPath on activity_path {\n  __typename\n  id\n  checkpoint_id\n  reached_at\n  location\n}\n\nfragment RewardType on reward_type {\n  __typename\n  id\n  name_en\n  name_hu\n  auto_approve\n  material_icon_name\n  weight\n}\n\nfragment Checkpoint on checkpoint {\n  __typename\n  id\n  name\n  index\n  location\n}\n\nfragment CheckpointExt on checkpoint {\n  __typename\n  ...Checkpoint\n  description\n}\n\nfragment ActivityCardFields on activity {\n  __typename\n  id\n  planned_at\n  trail_config {\n    __typename\n    trail {\n      __typename\n      ...TrailCardFields\n    }\n  }\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: AthleteWatchActivityDetails),
2021-09-23 06:36:26.561058: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:36:26.561058: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:36:26.570240: FINE: gql.links.RetryUntilResponseLink: (AthleteWatchActivityDetails#740705615): Requesting from source
2021-09-23 06:36:26.575261: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for AthleteWatchActivityDetails
2021-09-23 06:36:26.582369: FINE: services.LocationService: Start tracking...
2021-09-23 06:36:26.594630: INFO: services.LocationService: Tracking started with title: , message: , body: 
2021-09-23 06:36:26.607914: FINE: services.LocationService: Got position: Latitude: 47.56585789866153, Longitude: 18.395460013650258
2021-09-23 06:36:26.608073: FINE: services.LocationService: Got position: Latitude: 47.56441832128317, Longitude: 18.396446515715592
2021-09-23 06:36:26.616667: FINE: services.LocationService: Got position: Latitude: 47.56432370194334, Longitude: 18.396484234963285
2021-09-23 06:36:26.769800: FINE: services.LocationService: Got position: Latitude: 47.56441307549926, Longitude: 18.396439209273098
2021-09-23 06:36:26.782593: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteWatchActivityDetails
2021-09-23 06:36:27.068451: FINE: services.LocationService: Got position: Latitude: 47.564372333537676, Longitude: 18.396465926015445
2021-09-23 06:36:27.845644: FINE: gql.links.LogRequestsLink: Request sent: GATActivityDetailsReq {
2021-09-23 06:36:27.845644: FINE: gql.links.LogRequestsLink:   vars=GATActivityDetailsVars {
2021-09-23 06:36:27.845644: FINE: gql.links.LogRequestsLink:     activityId=2281d167-9469-4000-8e09-385044ebc326,
2021-09-23 06:36:27.845644: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:36:27.845644: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("fragment ATActivity on activity {\n  __typename\n  ...ActivityStateFields\n  ...OFFLTrackedActivity\n}\n\nsubscription ATActivityDetails($activityId: uuid!) {\n  activity_by_pk(id: $activityId) {\n    __typename\n    ...ATActivity\n  }\n}\n\nmutation ATCreateActivityPathPoint($object: activity_path_insert_input!) {\n  __typename\n  insert_activity_path_one(object: $object) {\n    __typename\n    ...ActivityPath\n  }\n}\n\nfragment OFFLTrackedActivity on activity {\n  __typename\n  ...ActivityStateFields\n  id\n  path\n  trail_config {\n    __typename\n    id\n    trail {\n      __typename\n      id\n      circular_checkpoints\n      trail_path\n      summary_path\n      checkpoints(order_by: {index: asc}) {\n        __typename\n        id\n        index\n        location\n        range_meters\n      }\n    }\n  }\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment OFFLTrackedActivityWrite on activity {\n  __typename\n  id\n  end_at\n  path\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment ActivityStateFields on activity {\n  __typename\n  deleted_at\n  planned_at\n  approved_at\n  start_at\n  end_at\n  giveup_at\n  trail_config {\n    __typename\n    reward_type {\n      __typename\n      auto_approve\n    }\n  }\n}\n\nfragment ActivityPath on activity_path {\n  __typename\n  id\n  checkpoint_id\n  reached_at\n  location\n}\n\nfragment ActivityCardFields on activity {\n  __typename\n  id\n  planned_at\n  trail_config {\n    __typename\n    trail {\n      __typename\n      ...TrailCardFields\n    }\n  }\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: ATActivityDetails),
2021-09-23 06:36:27.845644: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:36:27.845644: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:36:27.849694: FINE: gql.links.RetryUntilResponseLink: (ATActivityDetails#1896125767): Requesting from source
2021-09-23 06:36:27.855474: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for ATActivityDetails
2021-09-23 06:36:27.858088: FINE: services.LocationService: Stopping location tracking...
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink: Request sent: GAthleteStartActivityReq {
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink:   vars=GAthleteStartActivityVars {
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink:     id=2281d167-9469-4000-8e09-385044ebc326,
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink:     startAt=2021-09-23 06:36:27.858623,
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("mutation AthleteCreateActivity($id: uuid!, $configId: uuid!, $plannedAt: timestamptz!) {\n  __typename\n  insert_activity_one(object: {id: $id, trail_config_id: $configId, planned_at: $plannedAt}) {\n    __typename\n    id\n  }\n}\n\nmutation AthleteStartActivity($id: uuid!, $startAt: timestamptz!) {\n  __typename\n  update_activity_by_pk(pk_columns: {id: $id}, _set: {start_at: $startAt}) {\n    __typename\n    id\n    start_at\n  }\n}\n\nmutation AthleteGiveUpActivity($id: uuid!, $giveupAt: timestamptz!) {\n  __typename\n  update_activity_by_pk(pk_columns: {id: $id}, _set: {giveup_at: $giveupAt}) {\n    __typename\n    id\n    giveup_at\n  }\n}"), operationName: AthleteStartActivity),
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:36:27.861148: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:36:27.867026: INFO: services.LocationService: Location tracking stopped
2021-09-23 06:36:27.868254: FINE: gql.links.RetryUntilResponseLink: (AthleteStartActivity#759683800): Requesting from source
2021-09-23 06:36:28.060325: FINE: gql.links.RetryUntilResponseLink: (AthleteStartActivity#759683800): Got Done event
2021-09-23 06:36:28.061819: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteStartActivity
2021-09-23 06:36:28.067522: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for AthleteGetEntries
2021-09-23 06:36:28.067805: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for AthleteWatchActivityDetails
2021-09-23 06:36:28.068198: INFO: gql.links.MultiMutationLink: (759683800): is done
2021-09-23 06:36:28.076392: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteGetEntries
2021-09-23 06:36:28.696363: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteWatchActivityDetails
2021-09-23 06:42:53.146869: FINE: gql.links.LogRequestsLink: Request sent: GAthleteGetEntriesReq {
2021-09-23 06:42:53.146869: FINE: gql.links.LogRequestsLink:   vars=GAthleteGetEntriesVars {
2021-09-23 06:42:53.146869: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:42:53.146869: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription AthleteGetEntries {\n  activity(order_by: {planned_at: asc, trail_config: {trail: {name: asc}}}, where: {_and: {end_at: {_is_null: true}, giveup_at: {_is_null: true}, deleted_at: {_is_null: true}}}) {\n    __typename\n    ...ActivityCardFields\n    ...OFFLTrackedActivity\n  }\n}\n\nfragment OFFLTrackedActivity on activity {\n  __typename\n  ...ActivityStateFields\n  id\n  path\n  trail_config {\n    __typename\n    id\n    trail {\n      __typename\n      id\n      circular_checkpoints\n      trail_path\n      summary_path\n      checkpoints(order_by: {index: asc}) {\n        __typename\n        id\n        index\n        location\n        range_meters\n      }\n    }\n  }\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment OFFLTrackedActivityWrite on activity {\n  __typename\n  id\n  end_at\n  path\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment ActivityStateFields on activity {\n  __typename\n  deleted_at\n  planned_at\n  approved_at\n  start_at\n  end_at\n  giveup_at\n  trail_config {\n    __typename\n    reward_type {\n      __typename\n      auto_approve\n    }\n  }\n}\n\nfragment ActivityCardFields on activity {\n  __typename\n  id\n  planned_at\n  trail_config {\n    __typename\n    trail {\n      __typename\n      ...TrailCardFields\n    }\n  }\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: AthleteGetEntries),
2021-09-23 06:42:53.146869: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:42:53.146869: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:42:53.153011: FINE: gql.links.RetryUntilResponseLink: (AthleteGetEntries#1340711445): Requesting from source
2021-09-23 06:42:53.157018: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for AthleteGetEntries
2021-09-23 06:42:53.711102: FINE: gql.links.LogRequestsLink: Request sent: GAthleteGetEntriesReq {
2021-09-23 06:42:53.711102: FINE: gql.links.LogRequestsLink:   vars=GAthleteGetEntriesVars {
2021-09-23 06:42:53.711102: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:42:53.711102: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription AthleteGetEntries {\n  activity(order_by: {planned_at: asc, trail_config: {trail: {name: asc}}}, where: {_and: {end_at: {_is_null: true}, giveup_at: {_is_null: true}, deleted_at: {_is_null: true}}}) {\n    __typename\n    ...ActivityCardFields\n    ...OFFLTrackedActivity\n  }\n}\n\nfragment OFFLTrackedActivity on activity {\n  __typename\n  ...ActivityStateFields\n  id\n  path\n  trail_config {\n    __typename\n    id\n    trail {\n      __typename\n      id\n      circular_checkpoints\n      trail_path\n      summary_path\n      checkpoints(order_by: {index: asc}) {\n        __typename\n        id\n        index\n        location\n        range_meters\n      }\n    }\n  }\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment OFFLTrackedActivityWrite on activity {\n  __typename\n  id\n  end_at\n  path\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment ActivityStateFields on activity {\n  __typename\n  deleted_at\n  planned_at\n  approved_at\n  start_at\n  end_at\n  giveup_at\n  trail_config {\n    __typename\n    reward_type {\n      __typename\n      auto_approve\n    }\n  }\n}\n\nfragment ActivityCardFields on activity {\n  __typename\n  id\n  planned_at\n  trail_config {\n    __typename\n    trail {\n      __typename\n      ...TrailCardFields\n    }\n  }\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: AthleteGetEntries),
2021-09-23 06:42:53.711102: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:42:53.711102: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:42:53.716272: FINE: gql.links.RetryUntilResponseLink: (AthleteGetEntries#1340711445): Requesting from source
2021-09-23 06:42:53.721285: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for AthleteGetEntries
2021-09-23 06:42:54.643985: FINE: gql.links.LogRequestsLink: Request sent: GAthleteWatchActivityDetailsReq {
2021-09-23 06:42:54.643985: FINE: gql.links.LogRequestsLink:   vars=GAthleteWatchActivityDetailsVars {
2021-09-23 06:42:54.643985: FINE: gql.links.LogRequestsLink:     activityId=2281d167-9469-4000-8e09-385044ebc326,
2021-09-23 06:42:54.643985: FINE: gql.links.LogRequestsLink:   },
2021-09-23 06:42:54.643985: FINE: gql.links.LogRequestsLink:   operation=Operation(document: DocumentNode("subscription AthleteWatchActivityDetails($activityId: uuid!) {\n  activity_by_pk(id: $activityId) {\n    __typename\n    ...ActivityCardFields\n    ...OFFLTrackedActivity\n  }\n}\n\nfragment OFFLTrackedActivity on activity {\n  __typename\n  ...ActivityStateFields\n  id\n  path\n  trail_config {\n    __typename\n    id\n    trail {\n      __typename\n      id\n      circular_checkpoints\n      trail_path\n      summary_path\n      checkpoints(order_by: {index: asc}) {\n        __typename\n        id\n        index\n        location\n        range_meters\n      }\n    }\n  }\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment OFFLTrackedActivityWrite on activity {\n  __typename\n  id\n  end_at\n  path\n  activity__pathpoints(distinct_on: checkpoint_id, where: {checkpoint_id: {_is_null: false}}, order_by: [{checkpoint_id: asc}, {reached_at: asc}]) {\n    __typename\n    reached_at\n    checkpoint {\n      __typename\n      id\n      index\n      location\n    }\n  }\n}\n\nfragment ActivityStateFields on activity {\n  __typename\n  deleted_at\n  planned_at\n  approved_at\n  start_at\n  end_at\n  giveup_at\n  trail_config {\n    __typename\n    reward_type {\n      __typename\n      auto_approve\n    }\n  }\n}\n\nfragment ActivityType on activity_type {\n  __typename\n  id\n  name_en\n  name_hu\n  material_icon_name\n  weight\n}\n\nfragment ActivityPath on activity_path {\n  __typename\n  id\n  checkpoint_id\n  reached_at\n  location\n}\n\nfragment RewardType on reward_type {\n  __typename\n  id\n  name_en\n  name_hu\n  auto_approve\n  material_icon_name\n  weight\n}\n\nfragment Checkpoint on checkpoint {\n  __typename\n  id\n  name\n  index\n  location\n}\n\nfragment CheckpointExt on checkpoint {\n  __typename\n  ...Checkpoint\n  description\n}\n\nfragment ActivityCardFields on activity {\n  __typename\n  id\n  planned_at\n  trail_config {\n    __typename\n    trail {\n      __typename\n      ...TrailCardFields\n    }\n  }\n}\n\nfragment TrailCardFields on trail {\n  __typename\n  name\n  summary\n  description\n  summary_path\n  elevation_meters\n  length_meters\n  minimum_height_meters\n  maximum_height_meters\n  popularity\n  circular_checkpoints\n  checkpoints(order_by: {index: asc}) {\n    __typename\n    location\n    range_meters\n  }\n}"), operationName: AthleteWatchActivityDetails),
2021-09-23 06:42:54.643985: FINE: gql.links.LogRequestsLink:   executeOnListen=true,
2021-09-23 06:42:54.643985: FINE: gql.links.LogRequestsLink: }
2021-09-23 06:42:54.652251: FINE: gql.links.RetryUntilResponseLink: (AthleteWatchActivityDetails#740705615): Requesting from source
2021-09-23 06:42:54.656927: FINE: gql.links.LogRequestsLink: Got DataSource.Cache response for AthleteWatchActivityDetails
2021-09-23 07:23:49.694199: FINE: gql.links.RetryUntilResponseLink: (AthleteGetTrailsForListing#337648663): Got Error event: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:49.694421: INFO: gql.links.RetryUntilResponseLink: (AthleteGetTrailsForListing#337648663): Retry due to connection error: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:49.694563: FINE: gql.links.RetryUntilResponseLink: (GetCurrentUserProfile#1910879012): Got Error event: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:49.694639: INFO: gql.links.RetryUntilResponseLink: (GetCurrentUserProfile#1910879012): Retry due to connection error: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:49.694764: FINE: gql.links.RetryUntilResponseLink: (AthleteGetEntries#1340711445): Got Error event: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:49.694849: INFO: gql.links.RetryUntilResponseLink: (AthleteGetEntries#1340711445): Retry due to connection error: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:49.694927: FINE: gql.links.RetryUntilResponseLink: (AthleteWatchActivityDetails#740705615): Got Error event: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:49.694999: INFO: gql.links.RetryUntilResponseLink: (AthleteWatchActivityDetails#740705615): Retry due to connection error: WebSocketChannelException: WebSocketChannelException: SocketException: Failed host lookup: 'instatrail.onbased.cloud' (OS Error: nodename nor servname provided, or not known, errno = 8)
2021-09-23 07:23:58.932222: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteGetEntries
2021-09-23 07:23:58.937231: FINE: gql.links.RetryUntilResponseLink: (AthleteGetEntries#1340711445): Got Done event
2021-09-23 07:23:58.943699: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for AthleteWatchActivityDetails
2021-09-23 07:23:58.946373: FINE: gql.links.RetryUntilResponseLink: (AthleteWatchActivityDetails#740705615): Got Done event
2021-09-23 07:23:59.427804: FINE: gql.links.LogRequestsLink: Got DataSource.Link response for GetCurrentUserProfile
